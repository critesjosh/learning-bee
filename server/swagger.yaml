swagger: "2.0"
info:
  description: "This is a sample learning bee server. For this sample, you can use the api key `special-key` to test the authorization filters."
  version: "0.0.1"
  title: "Learning Bee API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "hi@hi.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "none"
basePath: "/v0"
tags:
- name: "course"
  description: "Everything about available Courses"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "video"
  description: "Everything about available Videos"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "minting"
  description: "Access to minting operations"
schemes:
- "https"
- "http"
paths:
  /videos:
    get:
      tags:
      - "video"
      summary: "Get currently available videos"
      description: ""
      operationId: "getVideos"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ArrayOfVideos"
  /video/{videoId}:
    get:
      tags:
      - "video"
      summary: "Get a video by id"
      description: ""
      operationId: "getVideoById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "videoId"
        in: "path"
        description: "ID of video to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Video"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Video not found"
  /video/{videoId}/event:
    post:
      tags:
      - "video"
      - "minting"
      summary: "Submit a video tracking event"
      description: ""
      operationId: "postVideoEvent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "videoId"
        in: "path"
        description: "ID of completed video"
        required: true
        type: "integer"
        format: "int64"
      - in: body
        name: userVideoEvent
        schema:
          $ref: '#/definitions/UserVideoEvent'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Video"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Video not found"
        405:
          description: "Bad video event"
  /test/{testId}/event:
    post:
      tags:
      - "minting"
      summary: "Submit a test completed event"
      description: ""
      operationId: "postTestEvent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "testId"
        in: "path"
        description: "ID of completed test"
        required: true
        type: "integer"
        format: "int64"
      - in: body
        name: userTestEvent
        schema:
          $ref: '#/definitions/UserTestEvent'
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              passed: 
                type: "boolean"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Test not found"
        405:
          description: "Bad test event"
  /courses:
    get:
      tags:
      - "course"
      summary: "Get currently available courses"
      description: ""
      operationId: "getCourses"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ArrayOfCourses"
definitions:
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  Response:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      text:
        type: "string"
        example: "You never boil chicken you monster!"
      correct:
        type: "boolean"
  ArrayOfResponses:
    type: "array"
    items:
      $ref: "#/definitions/Response"
  Question:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Cooking Question"
      text:
        type: "string"
        example: "How long should you boil chicken?"
      responses:
        $ref: "#/definitions/ArrayOfResponses"
  ArrayOfQuestions:
    type: "array"
    items:
      $ref: "#/definitions/Question"
  Test:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Do you know how to cook chicken?"
      bounty:
        type: "integer"
        format: "int64
      questions:
        $ref: "#/definitions/ArrayOfQuestions"
  TestEvent:
    type: "object"
    properties:
      testId:
        type: "integer"
        format: "int64"
      responseIds:
        type: "array"
        items:
          type: "integer"
          format: "int64"
  ArrayOfTests:
    type: "array"
    items:
      $ref: "#/definitions/Test"
  ArrayOfCourses:
    type: "array"
    items:
      $ref: "#/definitions/Course"
  Course:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "Cooking 101"
      bounty:
        type: "integer"
        format: "int64"
      videos:
        $ref: "#/definitions/ArrayOfVideos"
  ArrayOfVideos:
    type: "array"
    items:
      $ref: "#/definitions/Video"
  Video:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "Learn to cook Chicken!"
      thumbnailUrl:
        type: "string"
      length:
        type: "integer"
        format: "int64"
      url:
        type: "string"
      bounty:
        type: "integer"
        format: "int64"
      tests:
        $ref: "#/definitions/ArrayOfTests"
  VideoEvent:
    type: "object"
    properties:
      videoId:
        type: "integer"
        format: "int64"
      eventType:
        type: string
        enum: [start, finish]
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      torusId:
        type: "string"
  UserVideoEvent:
    type: "object"
    properties:
      userId:
        type: "integer"
        format: "int64"
      videoEvent:
        $ref: "#/definitions/VideoEvent"
  UserTestEvent:
    type: "object"
    properties:
      userId:
        type: "integer"
        format: "int64"
      testEvent:
        $ref: "#/definitions/TestEvent"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"